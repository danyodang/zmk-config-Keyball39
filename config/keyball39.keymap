#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q             &kp W               &kp E     &kp R            &kp T                              &kp Y      &kp U  &kp I      &kp O                &kp P
&mt LEFT_SHIFT A  &mt LEFT_COMMAND S  &kp D     &kp F            &kp G                              &kp H      &kp J  &kp K      &mt RIGHT_COMMAND L  &mt RIGHT_SHIFT SQT
&lt 1 Z           &kp X               &kp C     &kp V            &kp B                              &lt 2 N    &kp M  &kp COMMA  &kp DOT              &lt 1 SLASH
&kp TAB           &kp LEFT_COMMAND    &kp LALT  &lt 6 BACKSPACE  &lt 4 SPACE  &lt 5 RET  &mkp RCLK  &mkp LCLK                                         &kp RSHFT
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)                  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)
&kp N1        &kp N2        &kp N3         &kp N4        &kp N5                         &kp N6         &kp N7        &kp N8        &kp N9        &kp N0
&none         &kp LS(LBRC)  &none          &kp GRAVE     &kp LBKT                       &kp RBKT       &kp BSLH      &trans        &kp LS(RBRC)  &none
&trans        &trans        &trans         &trans        &trans         &trans  &trans  &trans                                                   &trans
            >;
        };

        BT_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT                  &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&bt BT_CLR       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans                       &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp SQT
&trans           &trans        &trans        &trans        &trans                       &kp UNDERSCORE  &kp PLUS       &trans            &trans                &kp NON_US_BACKSLASH
&trans           &trans        &trans        &trans        &trans       &trans  &trans  &trans                                                                 &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp ESC   &kp F2   &kp F3   &kp F4   &none                   &none   &none  &none  &none  &none
&kp CAPS  &kp F6   &kp F7   &kp F8   &none                   &none   &none  &none  &none  &none
&kp F9    &kp F10  &kp F11  &kp F12  &none                   &none   &none  &none  &none  &none
&trans    &trans   &trans   &trans   &trans  &trans  &trans  &trans                       &trans
            >;
        };

        arrows {
            label = "arrow";
            bindings = <
&none           &kp N2    &kp UP          &kp N4                &kp N5                  &kp N6         &kp N7    &kp UP    &kp N9         &kp N0
&kp LEFT_ARROW  &kp LEFT  &kp LEFT_SHIFT  &kp RS(LEFT_COMMAND)  &none                   &kp TAB        &kp LEFT  &kp DOWN  &kp RIGHT      &mkp MCLK
&kp LSHFT       &kp BSPC  &none           &none                 &none                   &kp PAGE_DOWN  &none     &none     &kp SEMICOLON  &kp COLON
&none           &trans    &trans          &trans                &trans  &trans  &trans  &mo 3                                             &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans              &trans          &trans                  &trans  &trans    &kp UP    &trans     &trans
&trans  &trans  &kp LG(LEFT_SHIFT)  &kp LEFT_SHIFT  &trans                  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans  &trans  &trans              &trans          &trans                  &trans  &trans    &trans    &trans     &trans
&trans  &trans  &trans              &trans          &trans  &trans  &trans  &trans                                 &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &bootloader                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans                          &trans
            >;
        };
    };
};
